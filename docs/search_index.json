[
["index.html", "R para análise de dados Apresentação Objetivos Estrutura Requisitos Programa", " R para análise de dados Ítalo Cegatta Apresentação Este site reúne os materiais utilizados no curso prático de análise de dados com a linguagem de programação R. O objetivo do curso é fornecer aos participantes as habilidades necessárias para iniciar uma análise utilizando o R de forma prática e rápida sem conhecimento prévio. Objetivos Após concluir este material, os alunos irão: Estar familiarizados com o ambiente de programação do R e RStudio Seja capaz de visualizar seus dados Ser capaz de executar etapas básicas de preparação de dados Ser capaz de executar a transformação de dados e resumos Ser capaz de calcular estatística básica Estrutura O curso é composto de 3 módulos sequenciais, cada um com uma carga horária de 16 horas. Este material é utilizado durante o curso e todos os códigos e exercícios são executados pelos alunos. Requisitos Para realização dos curso, é necessário um computador com as versões mais recentes dos softwares R e RStudio instalados. Software R Software RStudio Pacotes install.packages(c(\"tidyverse\", \"readxl\", \"broom\", \"car\", \"agricolae\")) Dados TUME_134_2016.xlsx inv_amazonia.xlsx onix.xlsx filmes_imdb.csv progenies.csv ibge_2015_area_floresta_plan.xlsx base_prouni.xlsx Programa Módulo I Dia 1 Introdução à linguagem R e Processamento Básico de dados Linguagem R e RStudio Conceituações básicas do R e sua área de trabalho Pacotes e funções básicas Manipulação de dados Dia 2 Visualização de dados e estatística experimental Processamento e análise gráfica de dados Regressão linear ANOVA Teste de Tukey Módulo II Dia 1 Elementos básicos da linguagem R Tipos de elementos e objetos Indexação Strings, fatores e datas Joins Dia 2 Organização de dados, loops e estatística experimental Tidydata Iteração (loops, purrr) Análise exploratória Estatística experimental Módulo III Dia 1 Processamento geoespacial e Web scraping Raster Vetor Mapas Web scraping Dia 2 Criação de pacotes e aplicativos interativos Funções Pacotes Shiny "],
["sobre-o-r.html", "Sobre o R Download do R e RStudio", " Sobre o R Se dedicar para aprender uma nova linguagem de programação não é uma tarefa fácil. Principalmente para quem não tem um background de lógica de programação. O R é um software open-source mantido por um grupo de voluntários de vários países, o R-core team. No site oficial do projeto a primeira descrição sobre ele é a seguinte: O R é uma linguagem e ambiente para computação estatística e gráficos. Esse grupo mantem o sistema base que possibilita a interação com a linguagem R para computação numérica, manipulação de dados, gráficos e uma variedade de outras tarefas. No R, tudo o que acontece é o resultado de uma função. Eu, você e tantos outros usuários podemos desenvolver funções para facilitar a nossa vida, posteriormente organizá-las em pacotes (ou packages) e depois disponibilizar para todo o mundo. O projeto do R teve início com Ross Ihaka e Robert Gentleman nos anos 90 a partir de uma implementação da linguagem S, que foi desenvolvida anos antes por um grupo de pesquisadores liderados por John Chambers no Bell Laboratories. Desde então, o R tem crescido em um ritmo absurdo e pode ser considerado o principal software livre para programação estatística e um dos mais usados no mundo. Sobre as potencialidades do R, no contexto de análise de dados, não há restrições. Em comparação com outras linguagem e softwares podemos ter diferença entre velocidade de processamento, suporte e disponibilidade de bibliotecas específicas, mas há um jargão antigo na comunidade R diz: pergunta certa sobre uma tarefa no R não é se podemos fazer, mas sim como podemos fazer. Download do R e RStudio O download do software R pode ser feito no site do CRAN. Após a instalação você já está apto para iniciar sua análise. Para trabalharmos em um ambiente com maiores funcionalidade, podemos optar por utilizar um ambiente de desenvolvimento integrado ao R. O RStudio é um dos mais utilizados e possui diversas funcionalidades que facilitam nossa vida durante uma análise. Faça o download do RStudio nesse link. Note que o Rstudio não irá funcionar se você não tiver instalado o R antes. "],
["manipulacao-de-dados.html", "Manipulação de dados Warm-Up Sobre o Tidyverse", " Manipulação de dados Warm-Up Conhecendo os dados Vamos começar importando os dados do arquivo filmes_imdb.csv. Para indicar que o arquivo está dentro de uma pasta, é preciso utilizar a barra /, library(tidyverse) df &lt;- read_csv2(&quot;input/filmes_imdb.csv&quot;) df Primeiro vamos fazer um histograma para poder ver a distribuição da variável nota. ggplot(data = df, aes(x = nota)) + geom_histogram() Agora, vamos ver a relação entre o valor_captado e o publico dos filmes. ggplot(data = df, aes(x = orcamento, y = faturamento)) + geom_point() ggplot(df, aes(orcamento, faturamento)) + geom_point() + geom_smooth() Qual o lucro médio dos filmes? Nosso objetivo agora é calcular o lucro médio dos filmes. Primeiro vamos criar uma coluna e calcular o lucro de cada filme. df2 &lt;- mutate(df, lucro = faturamento - orcamento) df2 Vamos isolar os valores de lucro e colocar em um objeto e em seguida calcular a média. vec_lucro &lt;- pull(df2, lucro) mean(vec_lucro) Vamos refazer os 2 primeiros passos unindo os comandos em um só. vec_lucro &lt;- pull(mutate(df, lucro = faturamento - orcamento)) mean(vec_lucro) Seguindo a mesma ideia, podemos unificar todos os comandos em uma única chamada. mean(pull(mutate(df, lucro = faturamento - orcamento), lucro)) Agora utilizando um operador especial chamado pipe, vamos executar as mesmas funções, porém de forma organizada e de fácil interpretação. df %&gt;% mutate(lucro = faturamento - orcamento) %&gt;% pull(lucro) %&gt;% mean() Sobre o Tidyverse Neste curso utilizaremos como referência os pacotes vinculados ao tidyverse, grupo de funções que utilizam a mesma filosofia de programação e foram desenvolvidos para atuarem em conjunto. O tidyverse é mantido por um time de desenvolvedores do RStudio e liderado pelo seu idealizador Hadley Wickham. Há diversas funções disponíveis nos pacotes do tidyverse que tem um equivalente direto nos pacotes base do R, mas com uma implementação mais moderna e consistente que facilita a estruturação do código. No decorrer do curso vamos ter vários exemplos desse comparativo. A manipulação de dados é, na maioria das vezes, realizado com data.frames e por isso iremos ver as principais funções que lidam com essa estrutura de forma rápida e prática. O pacote dplyr é hoje um dos pacotes mais utilizados para esta finalidade. Ele disponibiliza diversas funções que são “equivalentes” às funções básicas do R, mas como melhorias que nos poupam tempo e deixam o código muito mais fácil de interpretar. Como exemplo, vamos realizar uma análise exploratória dos dados de um inventário na floresta amazônica. library(tidyverse) library(readxl) inv_amazonia &lt;- read_excel(&quot;input/inv_amazonia.xlsx&quot;) inv_amazonia Filter Com a função filter() é possível selecionar linhas específicas, de acordo com o fator que se deseja. Podem ser usados um ou vários fatores de seleção. filter(inv_amazonia, cap &gt; 300) filter(inv_amazonia, cap &gt; 300 &amp; qf &gt; 1) filter(inv_amazonia, cap &gt; 300 | hcom &gt; 15) filter(inv_amazonia, especie == &quot;IPE&quot;) filter(inv_amazonia, especie %in% c(&quot;COPAIBA&quot;, &quot;IPE&quot;)) Arrange Para ordenar as colunas, podemos usar a função arrange(). A hierarquia é dada pela sequência dos fatores que são adicionados como argumentos da função. arrange(inv_amazonia, cap) arrange(inv_amazonia, -cap) Select A função select() auxilia-nos na seleção de variáveis (colunas). select(inv_amazonia, especie, cap) select(inv_amazonia, especie:cap) select(inv_amazonia, -(familia:comercial)) Mutate Para criar novas variáveis, podemos usar a função mutate(). Um diferencial dessa função em relação à função base do R, é que podemos utilizar variáveis criadas dentro do próprio comando. mutate( inv_amazonia, dap = cap / pi, secao = pi * dap^2 / 4 ) Note que se quisermos utilizar os dados calculados no futuro, temos de salvar em um objeto. No caso, vamos salvar no mesmo objeto inv_amazonia2 de forma que ele será atualizado com as novas colunas. inv_amazonia2 &lt;- mutate( inv_amazonia, dap = cap / pi ) Summarise A função summarise nos permite resumir dados. Também é possível resumir dados em função de vários fatores com o group_by. summarise(inv_amazonia2, dap_medio = mean(dap)) summarise(inv_amazonia2, hcom_medio = mean(hcom)) summarise(inv_amazonia2, hcom_medio = mean(hcom, na.rm = TRUE)) inv_amazonia_by_esp &lt;- group_by(inv_amazonia2, especie) summarise(inv_amazonia_by_esp, dap_medio = mean(dap)) inv_amazonia_by_esp &lt;- group_by(inv_amazonia2, especie) resumo_esp &lt;- summarise( inv_amazonia_by_esp, n = n(), dap_medio = mean(dap, na.rm = TRUE), hcom_medio = mean(hcom, na.rm = TRUE) ) resumo_esp filter(resumo_esp, dap_medio &gt; 50) Operador %&gt;% O pacote dplyr foi desenhado para trabalhar em conjunto que o operador em cadeia %&gt;%. O que esse operador faz é aplicar o que está no LHS no primeiro parâmetro da função do RHS. Podemos também direcionar o local onde o conteúdo do LHS será aplicado informando um . como argumento. inv_amazonia2 %&gt;% group_by(especie) %&gt;% summarise( n = n(), dap_medio = mean(dap, na.rm = TRUE), hcom_medio = mean(hcom, na.rm = TRUE) ) %&gt;% filter(dap_medio &gt; 50) inv_amazonia %&gt;% filter(comercial == &quot;Sim&quot;) %&gt;% select(especie, cap) %&gt;% arrange(desc(cap)) %&gt;% slice(1:5) Gráficos rápidos inv_amazonia2 %&gt;% group_by(especie) %&gt;% summarise(dap_medio = mean(dap, na.rm = TRUE)) %&gt;% arrange(desc(dap_medio)) %&gt;% slice(1:20) %&gt;% ggplot(aes(especie, dap_medio)) + geom_col() + coord_flip() + theme_bw() inv_amazonia2 %&gt;% group_by(parcela) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% ggplot(aes(factor(parcela), n)) + geom_col() + theme_bw() inv_amazonia2 %&gt;% ggplot(aes(dap, hcom)) + geom_point() + theme_bw() inv_amazonia2 %&gt;% ggplot(aes(dap, hcom, color = comercial)) + geom_point() + geom_smooth() + theme_bw() "],
["visualizacao.html", "Visualização Conceitos básicos Layers Os dados A camada de geometria A camada de estatísticas Edições de eixos Aesthetics Grupos Geometrias Escalas scale_x|y_continuous Escalas de cor Facets", " Visualização O ggplot2é o pacote mais utilizado para criação de gráficos no R. Ele implementa a Gramática dos Gráficos proposta por Leland Wilkinson em seu livro The Grammar of Graphics. A ideia é que há uma gramática racional e computacional para a composição de gráficos estatísticos. Ao controlar a gramática, você pode gerar um grande conjunto de gráficos cuidadosamente construídos a partir de um conjunto relativamente pequeno de operações. Existem muitos materiais e cursos sobre como criar gráficos com o ggplot2. Basta um simples google sobre o assunto ou problema que você tem e rapidamente vai aparecer uma pergunta semelhante e várias respostas assunto. Como padrão, a documentação do pacote pode ser consultada, bem como diversos livros sobre o assunto. Recomendo o site do pacotes ggplot2 e o livro do autor Conceitos básicos Existem alguns conceitos básicos em torno desde universo de gráficos. Em primeiro lugar, os gráficos são construídos em camadas (layers). Cada componente do gráfico, a partir dos dados fornecidos, está amarrado ao sistema de coordenadas e este por sua vez, está condicionado aos resumos estatísticos, rótulos e escalas. Portanto, gráficos expressos são construídos com poucos comandos, mas com definições padrões. Para criar gráficos personalizados e de maior qualidade é preciso adicionar algumas funções… mas fique tranquilo, dificilmente vai passar de 7 camadas. As propriedades gráficas que codificam os dados são dimensões tratadas como aesthetic no ggplot2, destacando: x y size shape color fill Os elementos gráficos são as geometrias, como: point line segment bar/col text area hitogram density Você também vai querer adicionar estatísticas que resumem seus dados, e o pacote possibilita algumas delas: smooth mean/median function As dimensões (aesthetic), geometrias e resumos estatísticos constituem as mais importantes camadas de gráfico, mas há uma série de outras características que você vai querer ajustar. As mais comuns são: Eixo x ou y em escala logarítmica Paletas de cores personalizadas Formas de pontos personalizado, ou tipos de linha As seções seguintes são dedicadas a alguns destes elementos básicos ggplot2. Layers Iremos criar gráficos em camadas. A estratificação de elementos é talvez o aspecto mais poderoso do ggplot2. Isso significa que gráficos relativamente complexos são construídos com pequenas peças, que você pode adicionar ou remover de forma iterativa. Os dados O primeiro argumento da função ggplot() é um data.frame, e seu segundo argumento é aes(). Você nunca vai usar aes() em qualquer outro contexto, exceto dentro de outras funções do ggplot2, por isso talvez seja melhor não pensar em aes() como função individual, mas sim como uma forma especial de definir as dimensões dos gráficos. library(tidyverse) library(readxl) inv &lt;- read_excel(&quot;input/TUME_134_2016.xlsx&quot;) ggplot(inv, aes(x = CAP_cm, y = H_m)) Veja que os dados e as dimensões dos dados já foram informados, entretanto não nada no gráfico criado por não temos uma geometria definida. Cada layer tem uma base de dados. Você pode indicar os dados na função principal ggplot() ou nos layers específicos. O mesmo ocorre para a definição das dimensões com a função aes(). A camada de geometria O passo seguinte, depois de definir os dados e as dimensões, é adicionar a geometrias. Iremos discutir geometrias em mais detalhe abaixo, mas por agora, vamos adicionar a mais simples de todas: os pontos. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_point() Cada camada é feita por uma função. Algumas não precisarão de argumentos pois será utilizado o default. No exemplo anterior, fizemos um gráfico e adicionamos a camada de ponto geom_point(), por padrão, serão mostrados pontos pretos e sólidos de tamanho 1. Caso você queira alterar o formato do ponto, basta especificar no argumento indicado. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_point(shape = 2) Ou, se quiséssemos usar pontos vermelhos e maiores, poderíamos definir: ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_point(color = &quot;red&quot;, size = 3) Como padrão, o ggplot2 cria um fundo cinza e linhas de grades brancas. Tem uma explicação plausível para isso e na maioria das vezes é bem útil, mas de forma geral não estamos acostumados a esse tema e isso pode incomodar. Mas fique tranquilo, isso é perfeitamente ajustável, vamos ver a seguir como fazê-lo. Outro padrão é o nome dos eixos. Ele é correspondente à variável indicada, mas também pode ser alterado utilizando a função labs. Finalmente, note que nós não precisamos dizer em geom_point() quais são as dimensões do gráfico. Já fizemos isso na função principal. Os layer herdam essas definições da função principal e por isso não precisamos ficar redefinindo a todo momento. A camada de estatísticas Adicionar uma linha de tendência uma suavização é muito simples, veja o exemplo. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_smooth(method = &quot;lm&quot;) Nesse gráfico, foi ajustado uma regressão linear com um intervalo de confiança de 95%. Uma coisa importante a entender é que não é necessário incluir os pontos, podemos apresentar somente a linha de tendência. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_smooth(method = &quot;lm&quot;) Edições de eixos Podemos alterar o nome dos eixos e ainda adicionar título, subtítulo e fonte ao gráfico. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_smooth(method = &quot;lm&quot;) + labs( title = &quot;TUME 134&quot;, subtitle = &quot;Faz. Areão&quot;, caption = &quot;Projeto TUME&quot;, x = &quot;CAP (cm)&quot;, y = &quot;Altura (m)&quot; ) + theme_bw() Aesthetics No ggplot2, aesthetic são os elementos gráficos que representam as dimensões dos dados, e que são definidos com aes(). Em certa medida, a dimensão que você precisa para definir depende das geometrias que você deseja utilizar. Por exemplo, segmentos de linha tem propriedades geométricas diferentes de pontos. Mas de maneira geral, essa padronização não é problemática. x: localização do eixo-X. y: localização do eixo y. color: A cor das linhas, pontos, e as fronteiras externas das geometrias (polígonos, barras, etc.). fill : A cor de preenchimento das geometrias. size: O tamanho dos pontos. shape: Específico para pontos, define a forma dele. linetype: Específico para linhas, define o tipo de linha, caminho, ou borda de uma geometria. alpha: Isto define a opacidade de qualquer propriedade geométrica. É mais utilizada quando temos sobreposição de pontos ou linhas e queremos enxergar o que está por de trás. xend, yend: Você vai usá-los raramente, quando criar um segmento de linha, ou seta. O início do segmento de linha será localizado o x e y, e a extremidade do segmento de linha será definida em xend, yend. Se aplicarmos a dimensão de cor em função da variável Cod, vamos notar que o ggplot2 entendeu que se trata de números e por isso adicionou uma escala contínua de cor na legenda. Não está certo, mas é o default. ggplot(inv, aes(x = CAP_cm, y = H_m, color = Cod)) + geom_point() O ggplot2 gerou automaticamente uma paleta de cores para os dados e criou uma legenda. Tal como acontece com tudo, a paleta de cores também é ajustável, o que será discutido em mais detalhe abaixo. O padrão de cores do ggplot2 é bastante inteligente. Cada cor é equidistante em torno de um círculo de cor HSL, e têm igual luminância. A ideia é que nenhuma categoria tenha maior destaque que outra, em contrapartida ela pode ser um problema para leitores daltônicos. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_point(color = &quot;red&quot;) Neste momento você pode notar a diferença de indicar a cor fora do aes() não gera legenda e se aplica a todos os pontos. Quando a cor representa uma dimensão dos nossos dados, seja uma escala discreta ou contínua, ela deve ser indicada dentro da função aes() em conjunto com a variável que definirá a dimensão. Grupos Vamos criar um gráfico com uma linha de tendência por ano. O parâmetro se = FALSE é para retirar o intervalo de confiança da linha de tendência e facilita a visualização. ggplot(inv, aes(x = CAP_cm, y = H_m, color = Esp)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) Como a dimensão cor foi definida na função principal, todos layers herdaram essa informação. Mas e se quisermos um gráfico com pontos coloridos, mas só uma linha de tendência? Simples, vamos dar a dimensão de cor somente para o layer de pontos. ggplot(inv, aes(x = CAP_cm, y = H_m)) + geom_point(aes(color = Esp)) + geom_smooth(method = &quot;lm&quot;) É importante lembrar que não é só a dimensão de cor que gera sub-agrupamentos no gráfico. Se utilizarmos a forma para diferenciar a variável, essa definição também será herdade nos layers subsequentes. ggplot(inv, aes(x = CAP_cm, y = H_m, shape = Esp)) + geom_point() A criação de gráficos com cores é uma atividade comum em muitas situações. Podemos definir se um gráfico será colorido de duas formas, o preenchimento interno da geometria ou a linha externa. Para o primeiro, utilizamos o argumento fill = &lt;variável&gt;e para o segundo color = &lt;variável&gt;. Note que as variáveis podem ser contínuas ou discretas para ambos os casos. resumo_clone &lt;- inv %&gt;% group_by(Esp) %&gt;% summarise( H_m = mean(H_m, na.rm = TRUE), CAP_cm = mean(CAP_cm, na.rm = TRUE), n_arv = n(), n_falha = sum(ifelse(Cod == 1, 1, 0), na.rm = TRUE), p_alha = (n_falha / n_arv) * 100 ) ggplot(resumo_clone, aes(Esp, CAP_cm)) + geom_col() Se quisermos colorir as barras, o primeiro instinto seria provavelmente para definir color = Esp. Mas este argumento considera apenas o contorno das figuras bidimensionais. ggplot(resumo_clone, aes(Esp, CAP_cm, color = Esp)) + geom_col() O preenchimento é feito utilizando o argumento fill = Esp. ggplot(resumo_clone, aes(Esp, CAP_cm, fill = Esp)) + geom_col() Geometrias Até o momento, nós usamos as seguintes geometrias: geom_point() geom_smooth() geom_col() Todas as geometrias começam com geom_*, esta é a lista completa das geometrias disponível pelo ggplot2. apropos(&quot;^geom_&quot;) Esta é uma lista bastante extensa, e não iremos ver todo seu conteúdo hoje. Mas podemos iremos exemplificar alguns casos. Histograma e Densidade O histograma é um gráfico univariado bastante comum no meio científico. Sua principal função é apresentar a distribuição de frequências dos dados. ggplot(inv, aes(CAP_cm)) + geom_histogram() Também é possível considerar a distribuição dos Clones de maneira independente e adicionar uma transparência às barras. ggplot(inv, aes(CAP_cm, fill = Esp)) + geom_histogram(position = &quot;identity&quot;, alpha = 0.5) Densidade Visualizar a distribuição de frequências também é um recurso muito interessante para entender os nossos dados. Podemos fazê-lo através de um histograma eu de gráfico de densidade de frequências. ggplot(inv, aes(H_m)) + geom_density() Podemos identificar a distribuição do Esp através de cores. ggplot(inv, aes(H_m, fill = Esp)) + geom_density() Entretanto o padrão da função geom_density() é usar position = \"identity\". Isso significa que pode haver (como de fato acontece) sobreposição das curvas. Uma alternativa rápida é colocar opacidade ao preenchimento para poder ver através das curvas. ggplot(inv, aes(H_m, fill = Esp, color = Esp)) + geom_density(alpha = 0.3) Caso o interesse seja ver a contribuição de cada sexo para a distribuição total do peso, iremos trabalhar com o parâmetro position = \"stack\" ggplot(inv, aes(H_m, fill = Esp, color = Esp)) + geom_density(position = &quot;stack&quot;) A próxima variação é tratar os valores em porcentagem, do mesmo modo que fizemos com as barras. ggplot(inv, aes(H_m, fill = Esp, color = Esp)) + geom_density(position = &quot;fill&quot;) Boxplot O boxplot é um gráfico muito útil para demonstrar a distribuição dos dados. Seu objetivo é evidenciar os quartis e outliers. ggplot(inv, aes(Esp, H_m)) + geom_boxplot() Entretanto não vemos os pontos e muitas vezes o gráfico pode nos enganar pois não vemos quantos pontos cada fator tem de verdade. Como alternativa a isto, podemos plotar os pontos em conjunto. ggplot(inv, aes(Esp, H_m)) + geom_boxplot() + geom_point() Entretanto, mais uma vez o gráfico pode nos enganar pois a sobreposição dos pontos esconde a verdadeira quantidade. A alternativa para esta situação é utilizar a função jitter(), que adiciona uma variação aleatória aos pontos transformando-os em uma massa de pontos. Para não haver duplicidades nos outliers, podemos retirara-los do boxplot. ggplot(inv, aes(Esp, H_m)) + geom_boxplot(outlier.color = NA) + geom_jitter( width = 0.1, alpha = 0.5 ) Vilolin e dotplot Para os que não gostam ou não entendem o boxplot, uma alternativa de gráfico que expressa a mesma ideia é o violin plot. O gráfico consiste em uma curva de densidade simétrica para cada fator. ggplot(inv, aes(Esp, CAP_cm)) + geom_violin() Podemos ainda adicionar os pontos para ter uma noção de quantidade. ggplot(inv, aes(Esp, CAP_cm)) + geom_violin() + geom_jitter(alpha = 0.3, width = 0.1) Entretanto, o mais indicado é combinar o violin plot com o dot plot e assim evidenciar claramente a distribuição de frequência com uma curva de suavização. ggplot(inv, aes(Esp, CAP_cm)) + geom_violin() + geom_dotplot( binaxis=&quot;y&quot;, stackdir=&quot;center&quot;, dotsize = 1 ) Barras Para demonstrar como os diferentes tipos de agrupamento de barras funcionam, vamos criar um gráfico que possui contagem de diferentes categorias por fator. ggplot(resumo_clone, aes(Esp, CAP_cm)) + geom_col() Podemos adicionar a dimensão de color para verificar a diferença nos dado resumo_clone %&gt;% ggplot(aes(Esp, CAP_cm, fill = n_falha)) + geom_col() Texto Adição de texto e rótulos ao gráfico em forma de geometria. Caso queira inserir uma anotação, utiliza annotate(). Uma questão especial Há uma estético especial apenas para geom_text() ou geom_label() chamadas label, que define a coluna que deve ser utilizada como marcador de texto. ggplot(inv, aes(CAP_cm, H_m, label = Cod)) + geom_point() + geom_label() + annotate(&quot;text&quot;, 70, 10, label = &quot;Este é um comentário&quot;) Escalas Todos os tipos de escala (eixos x e y, cor, preenchimento e tamanho) tem funções específicas de controle e podem ser totalmente customizadas. Os eixos, por exemplo, são modificados pelas funções com o prefixo scale_[x|y]_**(). apropos(&quot;^scale_x_&quot;) scale_x_continuous, scale_x_discrete, scale_x_datetime e scale_x_date são os tipos básicos de eixos x e y que você pode modificar no ggplot2. scale_x_log10, scale_x_sqrt e scale_x_reverse são transformações básicas para uma escala contínua. Também veremos como criar nossa nossa sequência para composição de eixos. Existem alguns argumentos básicos par as funções relacionadas às escalas numéricas. name: Nome do eixo ou título da legenda. limits: Define o intervalo que os dados serão apresentados no gráfico. breaks: Marcadores dos eixos ou da legenda. labels: Rótulos dos marcadores. scale_x|y_continuous O ggplot2 determina uma escala e limite padrão para os gráficos de acordo com a escala de variação. Às vezes, queremos maior detalhe da escala e por isso temos que modificar os argumentos. ggplot(inv, aes(CAP_cm, H_m)) + geom_point() A alteração dos breacks é feita por um vetor que indica onde será adicionado o marcador do eixo. ggplot(inv, aes(CAP_cm, H_m)) + geom_point() + scale_x_continuous(breaks = seq(0, 90, 2)) Caso seja interessante altera o rotulo do marcador, temos que criar um novo vetor que contem os nomes. ggplot(inv, aes(CAP_cm, H_m)) + geom_point() + scale_x_continuous(breaks = seq(0, 90, 10), labels = paste(seq(0, 90, 10), &quot;cm&quot;)) Escalas de cor A paleta de cor é um ponto crítico em um gráfico. Muitas vezes utilizamos a dimensão de cor para comparar algo e por este motivo devemos escolher com cuidado as cores que iremos colocar. O ggplot2 disponibiliza algumas paletas e funções à nossa disposição. Vocês podem pesquisar cada uma delas mais tarde e ver qual o diferencial que cada uma trás. apropos(&quot;^scale_color_&quot;) A característica básica é que existem funções para variáveis discretas e funções para variais contínuas. Para variáveis discretas, por exemplo, a função padrão é a scale_[fill|color]_hue(). ggplot(inv, aes(CAP_cm, H_m, color = Esp)) + geom_point() + scale_fill_hue() O pacote RColorBrewer disponibiliza um conjunto de paletas que podem ser incorporadas no ggplot2. basta identificar qual você deseja. Há paletas sequenciais e paletas divergentes. Caso queria ver as paletas, explore pelo comando RColorBrewer::display.brewer.all(). No gráfico, basta indicar o nome da paleta no argumento palette. ggplot(inv, aes(CAP_cm, H_m, color = Esp)) + geom_point() + scale_color_brewer(palette = &quot;Set1&quot;) Caso você queria colocar suas próprias cores, terá de fazer isso manualmente. Eu recomendo o site http://colorbrewer2.org/. A partir do código hexadecimal, podemos colocar as cores que queremos com a função scale_[color|fill]_manual(). ggplot(inv, aes(CAP_cm, H_m, color = Esp)) + geom_point() + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;darkgreen&quot;, &quot;gold&quot;, &quot;cyan&quot;, &quot;#fc9272&quot;, &quot;#4a1486&quot;)) Se for preciso economizar na impressão e colocar o gráfico em escala de cinza, sem problema, temos uma função pronta para isto. ggplot(inv, aes(CAP_cm, H_m, color = Esp)) + geom_point() + scale_color_grey() Facets Talvez o recuso mais interessante do R e ggplot2 no contexto de gráficos exploratórios seja a possibilidade (e facilidade) de criar gráficos em painéis. Esse pode ser feito em outros softwares, mas o ggplot2 oferece uma gama de funcionalidades relacionadas a este tema. ggplot(inv, aes(CAP_cm, H_m, color = Esp)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~Esp) + scale_color_brewer(palette = &quot;Dark2&quot;) "]
]
